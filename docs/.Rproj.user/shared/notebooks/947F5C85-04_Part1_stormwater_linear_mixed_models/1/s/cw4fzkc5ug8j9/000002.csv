"0","## Stepwise Selection"
"0",""
"0","#forward_selection(TRUE,coc,model_info$predictors)"
"0",""
"0","# Extract the model that step found:"
"0",""
"0","#perform forward selection on model parameters. First for non-transformed data, then for log-transformed data"
"0","forward_selection <- function(seasonal.bin, coc,predictors) {"
"0","  #seasonal.bin = binary (T/F) if seasonal model should be used"
"0","  library(lmerTest)"
"0","  #make this a lmer object "
"0","  df.coc <- (base::subset(s8data.wPredictors,"
"0","                parameter == coc)) "
"0","  model_object_formula <- as.formula(paste("
"0","    ""concentration ~"",  (paste((predictors),  collapse = "" + "")), "" + (1|Location)""))"
"0","  "
"0","  model_object <- lmer(model_object_formula,data=df.coc)"
"0","  "
"0","  step.2 <-  lmerTest::step(model_object,reduce.random=FALSE,data=df.coc)"
"0","  step.2.log <- lmerTest::step(stats::update(model_object, log(concentration)~.))"
"0","  "
"0","  #extract the models "
"0","  model.3 <- get_model(step.2)"
"0","  model.3.log <- get_model(step.2.log)"
"0","  "
"0","  #perform forward selection on model parameters, this time add seasonality . First for non-transformed data, then for log-transformed data"
"0","  step.4 <- lmerTest::step(stats::update(model_object,.~.+season))"
"0","  step.4.log <- lmerTest::step(stats::update(model_object,log(concentration) ~.+season))"
"0","  model.4 <- get_model(step.4)"
"0","  model.4.log <- get_model(step.4.log)"
"0","  "
"0","  #get formulas "
"0","  model.3.formula <- as.formula(model.3@call$formula)"
"0","  model.3.log.formula <- as.formula(model.3.log@call$formula)"
"0","  model.4.formula <- as.formula(model.4@call$formula)"
"0","  model.4.log.formula <- as.formula(model.4.log@call$formula)"
"0","  "
"0","  #detach lmer test and remove the models. Keep the formulas. "
"0","  detach(""package:lmerTest"", unload=TRUE)"
"0","  rm(model.3,model.3.log,model.4,model.4.log)"
"0","  "
"0","  #use lmer for performing modeling"
"0","  #calculate base model "
"0","  df.coc <- (base::subset(s8data.wPredictors,"
"0","                parameter == coc)) "
"0","  model.base <- lmer(model_object_formula,data=df.coc)"
"0","  model <- lmer(model.3.formula,data=df.coc)"
"0","  log_model<-  lmer(model.3.log.formula,data=df.coc)"
"0","  "
"0","  if(seasonal.bin) {"
"0","      #if seasonal model switch is on, calc seasonal models"
"0","    model_with_seasonality <- lmer(model.4.formula,data=df.coc)"
"0","    model_with_seasonality_log <- lmer(model.4.log.formula,data=df.coc)"
"0","      #add to list "
"0","    modelList <- c(model,log_model,model_with_seasonality,model_with_seasonality_log)"
"0","    "
"0","    }"
"0","    else {"
"0","    modelList <-c(model,log_model)"
"0","    modelLables <-c('linear','log-linear') "
"0","    }"
"0","   "
"0",""
"0"," "
"0"," return(modelList)#,show.aic = TRUE)# = FALSE, title=coc, dv.labels = modelLables) "
"0","  # #make a table of coefficients "
"0","  # tab_model(modelList,"
"0","  #   model_log,"
"0","  #   model_with_seasonality,"
"0","  #   model.with_seasonality_log,"
"0","  #   show.aic = TRUE,auto.label = FALSE, title=coc, dv.labels = c('linear','log-linear','linear seasonal','log-linear seasonal'))#file=paste0(""results/"",coc,"".html""))"
"0","}"
