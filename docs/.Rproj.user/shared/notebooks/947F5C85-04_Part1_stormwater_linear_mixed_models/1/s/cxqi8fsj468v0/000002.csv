"0","## *Check VIF"
"0"," "
"0","check_vif <- function(coc) {"
"0","  df.coc <- (base::subset(s8data.wPredictors,"
"0","                parameter == coc))"
"0","  base_formula <- getBaseFormula(df.coc)#returns a formula with all predictors"
"0","  model.1 <- lmer(base_formula, data = df.coc, na.action = na.omit) #make into a lmer object "
"0","  v <- sort(vif(model.1),decreasing=TRUE)"
"0","  "
"0","  #if the VIF of the highest ranked predictor is >10 then iteratively remove"
"0","  model_object <- model.1 #start with model object as the base model (all predictors included)"
"0","  "
"0","  "
"0","  for (i in 1:20) {"
"0","    interim_v <- sort(vif(model_object), decreasing = TRUE)"
"0","    if (max(interim_v) < 10) {"
"0","      break"
"0","    }"
"0","    predictor_to_drop = as.name(names(interim_v)[which(interim_v == max(interim_v))])"
"0","    model_object <-"
"0","      stats::update(model_object, paste("".~ . -"", predictor_to_drop))"
"0","    }"
"0","  "
"0","  m1Terms <- (labels(terms(model.1)))"
"0","  m2Terms <- labels(terms(model_object))"
"0","  "
"0","  #compare the terms to get a list of the dropped terms"
"0","  droppedTerms <- setdiff(m1Terms, m2Terms)"
"0","  "
"0","  #make a list of selected predictors"
"0","  predictors <- m2Terms#colnames(model.frame(model_object)) "
"0",""
"0","  "
"0","  #filter df.coc to remove dropped terms."
"0","  df.coc = dplyr::select(df.coc, -(droppedTerms))"
"0","  return(list(""vif"" = interim_v,""dropped"" = droppedTerms,""predictors"" = predictors))"
"0","  #kable(droppedTerms,caption = ""These terms were dropped"")"
"0","  "
"0","  #kable(interim_v,caption=""Variance Inflation Factors - multicolinear factors dropped"")"
"0","}"
"0",""
