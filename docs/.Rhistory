#use lmer for performing modeling
#calculate base model
df.coc <- (base::subset(s8data.wPredictors,
parameter == coc))
model.base <- lmer(model_object_formula,data=df.coc)
model <- lmer(model.3.formula,data=df.coc)
log_model<-  lmer(model.3.log.formula,data=df.coc)
if(seasonal.bin) {
#if seasonal model switch is on, calc seasonal models
model_with_seasonality <- lmer(model.4.formula,data=df.coc)
model_with_seasonality_log <- lmer(model.4.log.formula,data=df.coc)
#add to list
modelList <- c(model,log_model,model_with_seasonality,model_with_seasonality_log)
}
else {
modelList <-c(model,log_model)
modelLables <-c('linear','log-linear')
}
return(modelList)#,show.aic = TRUE)# = FALSE, title=coc, dv.labels = modelLables)
# #make a table of coefficients
# tab_model(modelList,
#   model_log,
#   model_with_seasonality,
#   model.with_seasonality_log,
#   show.aic = TRUE,auto.label = FALSE, title=coc, dv.labels = c('linear','log-linear','linear seasonal','log-linear seasonal'))#file=paste0("results/",coc,".html"))
}
results = c()
plots = c()
vifs = c()
tabs = c()
for (i in 1:length(params)){
coc = params[i]
df.coc <- (base::subset(s8data.wPredictors,
parameter == coc))
plots[[coc]] <- plot_s8(coc)
model_info <- check_vif(coc)
vifs[[coc]] <- model_info$vif
results[[coc]] = forward_selection(TRUE,coc,model_info$predictors)}
modelLabels <-c('linear','log-linear','linear seasonal','log-linear seasonal')
#Wrapper function for displaying results for individual cocs.
show_resultsFun <- function(j){
#get parameter label
lab = params[j]
models <- results[[j]]
#print((summary(models[[k]])))
#plot(models[[k]],,main=paste(lab,"\n","Resididuals"))
(qqmath(models[[2]],main=paste(lab,"\n",modelLabels[2],"\n","QQ plot of resididuals")))
}
j=1
lab=params[j]
kable(vifs[j],
caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=2
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=3
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=4
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=5
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=6
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=7
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=8
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=9
#
# lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
#
# j=10
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
tableSummary <- function(z){
coc = params[z]
tab_model(results[coc][[1]],   show.aic = TRUE,auto.label = FALSE, title=coc, dv.labels = c('linear','log-linear','linear seasonal','log-linear seasonal'))
}
tableSummaryNoSeason <- function(z){
coc = params[z]
tab_model(c(results[coc][[1]][1],results[coc][[1]][2]),   show.aic = TRUE,auto.label = FALSE, title=paste0(coc, " - No seasonal efects"), dv.labels = c('linear','log-linear'))
}
tableSummaryYesSeason <- function(z){
coc = params[z]
tab_model(c(results[coc][[1]][3],results[coc][[1]][4]),   show.aic = TRUE,auto.label = FALSE, title=paste0(coc, " - With seasonal efects"), dv.labels = c('linear seasonal','log-linear seasonal'))
}
z=1
if(is_latex_output()){
stargazer(results[params[z]],type="latex",header=FALSE,title = params[z])
} else{
tableSummaryNoSeason(z)
tableSummaryYesSeason(z)
}
z=2
if(is_latex_output()){
stargazer(results[params[z]],type="latex",header=FALSE,title = params[z])} else{
tableSummaryNoSeason(z)
tableSummaryYesSeason(z)
}
z=3
if(is_latex_output()){
stargazer(results[params[z]],type="latex",header=FALSE,title = params[z])} else{
tableSummaryNoSeason(z)
tableSummaryYesSeason(z)
}
z=4
if(is_latex_output()){
stargazer(results[params[z]],type="latex",header=FALSE,title = params[z])} else{
tableSummaryNoSeason(z)
tableSummaryYesSeason(z)
}
z=5
if(is_latex_output()){
stargazer(results[params[z]],type="latex",header=FALSE,title = params[z])} else{
tableSummaryNoSeason(z)
tableSummaryYesSeason(z)
}
z=6
if(is_latex_output()){
stargazer(results[params[z]],type="latex",header=FALSE,title = params[z])} else{
tableSummaryNoSeason(z)
}
z=7
if(is_latex_output()){
stargazer(results[params[z]],type="latex",header=FALSE,title = params[z])} else{
tableSummaryNoSeason(z)
YesSeason(z)
}
ZnPlots[2]
mcmc_trace(mod$Sol)
library(knitr)
library(rmdformats)
library(hrbrthemes)
library(tidyverse)
library(showtext)
library(kableExtra)
library(MCMCglmm)
library(bayesplot)
library(stargazer)
font_add("Roboto Condensed","robotocondensed-regular.ttf")
### Global options
options(warning = FALSE,message = FALSE,echo=FALSE,cache=TRUE)
opts_chunk$set(echo=FALSE,
message=FALSE,
warning=FALSE,cache=TRUE)
opts_knit$set(warning = FALSE,message = FALSE,echo=FALSE,cache=TRUE)
## ggploting theme
#theme_set(hrbrthemes::theme_ipsum_rc())
#hrbrthemes::import_roboto_condensed()
#hrbrthemes::update_geom_font_defaults()
#rm(list = ls())
#set the working directory
#setwd("~/repos/stormwaterheatmap/R-scripts/WatershedRegression")
#load packages
library(knitr)
library(tidyverse)
library(car)
library(caret)
library(psych)
library(DataExplorer)
library(dplyr)
library(readr)
library(lme4)
library(nlme)
library(hrbrthemes)
library(sjPlot)
library(Metrics)
## Global options
opts_chunk$set(prompt=FALSE,
message=FALSE,
warning=FALSE)
options(scipen = 1, digits = 3)
#set seed for reproducibility
set.seed(50)
all.S8.data <- read.csv("data/S8_data.csv",
stringsAsFactors = FALSE )
#filter out rejected data
all.S8.data <- (filter(all.S8.data,!result_data_qualifier %in% 'REJ'))
#filter out replicates
all.S8.data <- (filter(all.S8.data,!sample_replicate_flag %in% 'Y'))
#change nondetect warnings to detects
warnings <- all.S8.data$nondetect_flag == "WARNING"
all.S8.data$nondetect_flag[warnings] <- FALSE
#Change NA to detect
all.S8.data$nondetect_flag[is.na(all.S8.data$nondetect_flag)] <- FALSE
#Change season to factor
all.S8.data$season <- as.factor(all.S8.data$season)
#Select Parameters
params <- c('Zinc - Water - Total',
'Copper - Water - Total',
'Nitrite-Nitrate - Water - Dissolved',
'Lead - Water - Total',
'Total Phosphorus - Water - Total',
'Total Suspended Solids - Water - Total',
'Total Phthalate - Water - Total',
'Total PAH - Water - Total',
#'Chrysene - Water - Total',
'CPAH - Water - Total',
'HPAH - Water - Total'
#'Total Kjeldahl Nitrogen - Water - Total',
#'Total PCB - Water - Total'
)
#save a list of all the parameters in case we want to use mor.
params.all <- data.frame(unique(all.S8.data$parameter))
s8data <- all.S8.data
kable(params,col.names = "Constituent",caption = "Constituents of Concern Analyzed in this Study")
#
s8data <- all.S8.data %>%
dplyr::select(
study_name,
location_id,parameter,
type,
season,
new_result_value,
nondetect_flag,
study_id,
access_id,
field_collection_end_date,
field_collection_start_date,
type)
#rename some columns
colnames(s8data)[colnames(s8data) == "location_id"] <- "Location"
colnames(s8data)[colnames(s8data) == "new_result_value"] <-
"concentration"
s8data$nondetect_flag <- as.logical(s8data$nondetect_flag)
s8data$concentration <- as.numeric(s8data$concentration)
#make a function for scatter plots
scatter_cocs <- function(df.coc,title) {
p <- ggplot(df.coc, aes(1, concentration)) + geom_jitter() + labs(
title = title,
subtitle = "Data collected 2009-2013",
caption =
" Data source: Ecology, 2015",
x = "Observations"
)
p + facet_wrap( ~ parameter, scales = 'free')+theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
}
scatter_cocs(s8data[which(s8data$parameter %in% params),],'All Observations')
s8subset <- s8data[which(s8data$parameter %in% params), ]
s8subset$log_concentration <- log(s8subset$concentration)
ggplot(s8subset)+stat_qq(aes(sample=concentration))+
stat_qq_line(aes(sample=concentration))+facet_wrap(ncol = 3, ~parameter,scales = "free_y")+scale_y_log10()+ggtitle("QQ diagnostic plots - all COCs")
#remove and replot
outlierParams <- c("Total Suspended Solids - Water - Total", "Total Phosphorus - Water - Total", "Nitrite-Nitrate - Water - Dissolved")
#This removes the highest values
outlierVals <-
top_n(group_by(s8data[which(s8data$parameter %in% outlierParams), ], parameter), 1, concentration)$concentration
s8data <- s8data %>%
group_by(parameter) %>%
slice(which(!(
parameter %in% outlierParams & concentration %in% outlierVals
)))
scatter_cocs(s8data[which(s8data$parameter %in% params),],'All Observations - Outliers Removed')
#Spatial predcitors have been extracted and saved as a csv file.
#spatial_data<-read_csv("data/spatialPredictors_4_13.csv", col_types = cols(X1 = col_skip()))
spatial_data <- read_csv("data/spatialPredictors_521.csv")
#RES and COM are compositional data. Change to a ratio
spatial_data$LU_ratio = spatial_data$COM/spatial_data$RES
spatial_data <- dplyr::select(spatial_data, -c(RES,COM,`system:index`))
#merge spatial predictors with monitoring data
s8data.wPredictors <<- merge(s8data, spatial_data)%>%
dplyr::select(-c(depSplusN))
getBaseFormula <- function(df.coc) {
#Function to make a formula for prediction
predictors <- df.coc %>%
select_if(is.numeric) %>%
dplyr::select(-c(concentration, access_id)) %>%
colnames()
return(as.formula(paste(
"(concentration) ~",  (paste((predictors),  collapse = " + ")), " + (1|Location)"
)))
}
plot_s8 <- function(coc) {
df.coc <- (base::subset(s8data.wPredictors,
parameter == coc))
#plot the data to inspect
plot <- ggplot(data=(df.coc))+geom_point(aes(x=Location,y=concentration))+scale_y_log10()+labs(
y = "Concentration (Âµg/L)",
x = "Location",
title =  "Measured Concentrations",
subtitle = coc )
return(plot)
}
## *Check VIF
check_vif <- function(coc) {
df.coc <- (base::subset(s8data.wPredictors,
parameter == coc))
base_formula <- getBaseFormula(df.coc)#returns a formula with all predictors
model.1 <- lmer(base_formula, data = df.coc, na.action = na.omit) #make into a lmer object
v <- sort(vif(model.1),decreasing=TRUE)
#if the VIF of the highest ranked predictor is >10 then iteratively remove
model_object <- model.1 #start with model object as the base model (all predictors included)
for (i in 1:20) {
interim_v <- sort(vif(model_object), decreasing = TRUE)
if (max(interim_v) < 10) {
break
}
predictor_to_drop = as.name(names(interim_v)[which(interim_v == max(interim_v))])
model_object <-
stats::update(model_object, paste(".~ . -", predictor_to_drop))
}
m1Terms <- (labels(terms(model.1)))
m2Terms <- labels(terms(model_object))
#compare the terms to get a list of the dropped terms
droppedTerms <- setdiff(m1Terms, m2Terms)
#make a list of selected predictors
predictors <- m2Terms#colnames(model.frame(model_object))
#filter df.coc to remove dropped terms.
df.coc = dplyr::select(df.coc, -(droppedTerms))
return(list("vif" = interim_v,"dropped" = droppedTerms,"predictors" = predictors))
#kable(droppedTerms,caption = "These terms were dropped")
#kable(interim_v,caption="Variance Inflation Factors - multicolinear factors dropped")
}
## Stepwise Selection
#forward_selection(TRUE,coc,model_info$predictors)
# Extract the model that step found:
#perform forward selection on model parameters. First for non-transformed data, then for log-transformed data
forward_selection <- function(seasonal.bin, coc,predictors) {
#seasonal.bin = binary (T/F) if seasonal model should be used
library(lmerTest)
#make this a lmer object
df.coc <- (base::subset(s8data.wPredictors,
parameter == coc))
model_object_formula <- as.formula(paste(
"concentration ~",  (paste((predictors),  collapse = " + ")), " + (1|Location)"))
model_object <- lmer(model_object_formula,data=df.coc)
step.2 <-  lmerTest::step(model_object,reduce.random=FALSE,data=df.coc)
step.2.log <- lmerTest::step(stats::update(model_object, log(concentration)~.))
#extract the models
model.3 <- get_model(step.2)
model.3.log <- get_model(step.2.log)
#perform forward selection on model parameters, this time add seasonality . First for non-transformed data, then for log-transformed data
step.4 <- lmerTest::step(stats::update(model_object,.~.+season))
step.4.log <- lmerTest::step(stats::update(model_object,log(concentration) ~.+season))
model.4 <- get_model(step.4)
model.4.log <- get_model(step.4.log)
#get formulas
model.3.formula <- as.formula(model.3@call$formula)
model.3.log.formula <- as.formula(model.3.log@call$formula)
model.4.formula <- as.formula(model.4@call$formula)
model.4.log.formula <- as.formula(model.4.log@call$formula)
#detach lmer test and remove the models. Keep the formulas.
detach("package:lmerTest", unload=TRUE)
rm(model.3,model.3.log,model.4,model.4.log)
#use lmer for performing modeling
#calculate base model
df.coc <- (base::subset(s8data.wPredictors,
parameter == coc))
model.base <- lmer(model_object_formula,data=df.coc)
model <- lmer(model.3.formula,data=df.coc)
log_model<-  lmer(model.3.log.formula,data=df.coc)
if(seasonal.bin) {
#if seasonal model switch is on, calc seasonal models
model_with_seasonality <- lmer(model.4.formula,data=df.coc)
model_with_seasonality_log <- lmer(model.4.log.formula,data=df.coc)
#add to list
modelList <- c(model,log_model,model_with_seasonality,model_with_seasonality_log)
}
else {
modelList <-c(model,log_model)
modelLables <-c('linear','log-linear')
}
return(modelList)#,show.aic = TRUE)# = FALSE, title=coc, dv.labels = modelLables)
# #make a table of coefficients
# tab_model(modelList,
#   model_log,
#   model_with_seasonality,
#   model.with_seasonality_log,
#   show.aic = TRUE,auto.label = FALSE, title=coc, dv.labels = c('linear','log-linear','linear seasonal','log-linear seasonal'))#file=paste0("results/",coc,".html"))
}
results = c()
plots = c()
vifs = c()
tabs = c()
for (i in 1:length(params)){
coc = params[i]
df.coc <- (base::subset(s8data.wPredictors,
parameter == coc))
plots[[coc]] <- plot_s8(coc)
model_info <- check_vif(coc)
vifs[[coc]] <- model_info$vif
results[[coc]] = forward_selection(TRUE,coc,model_info$predictors)}
modelLabels <-c('linear','log-linear','linear seasonal','log-linear seasonal')
#Wrapper function for displaying results for individual cocs.
show_resultsFun <- function(j){
#get parameter label
lab = params[j]
models <- results[[j]]
#print((summary(models[[k]])))
#plot(models[[k]],,main=paste(lab,"\n","Resididuals"))
(qqmath(models[[2]],main=paste(lab,"\n",modelLabels[2],"\n","QQ plot of resididuals")))
}
j=1
lab=params[j]
kable(vifs[j],
caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=2
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=3
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=4
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=5
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=6
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=7
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=8
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
# j=9
#
# lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
#
# j=10
#   lab=params[j]
#   kable(vifs[j],
#       caption = paste("Variance inflation factors",lab),col.names = c("vif"))
tableSummary <- function(z){
coc = params[z]
tab_model(results[coc][[1]],   show.aic = TRUE,auto.label = FALSE, title=coc, dv.labels = c('linear','log-linear','linear seasonal','log-linear seasonal'))
}
tableSummaryNoSeason <- function(z){
coc = params[z]
tab_model(c(results[coc][[1]][1],results[coc][[1]][2]),   show.aic = TRUE,auto.label = FALSE, title=paste0(coc, " - No seasonal efects"), dv.labels = c('linear','log-linear'))
}
tableSummaryYesSeason <- function(z){
coc = params[z]
tab_model(c(results[coc][[1]][3],results[coc][[1]][4]),   show.aic = TRUE,auto.label = FALSE, title=paste0(coc, " - With seasonal efects"), dv.labels = c('linear seasonal','log-linear seasonal'))
}
z=1
if(is_latex_output()){
stargazer(results[params[z]],type="latex",header=FALSE,title = params[z])
} else{
tableSummaryNoSeason(z)
tableSummaryYesSeason(z)
}
z=2
if(is_latex_output()){
stargazer(results[params[z]],type="latex",header=FALSE,title = params[z])} else{
tableSummaryNoSeason(z)
tableSummaryYesSeason(z)
}
z=3
if(is_latex_output()){
stargazer(results[params[z]],type="latex",header=FALSE,title = params[z])} else{
tableSummaryNoSeason(z)
tableSummaryYesSeason(z)
}
z=4
if(is_latex_output()){
stargazer(results[params[z]],type="latex",header=FALSE,title = params[z])} else{
tableSummaryNoSeason(z)
tableSummaryYesSeason(z)
}
z=5
if(is_latex_output()){
stargazer(results[params[z]],type="latex",header=FALSE,title = params[z])} else{
tableSummaryNoSeason(z)
tableSummaryYesSeason(z)
}
z=6
if(is_latex_output()){
stargazer(results[params[z]],type="latex",header=FALSE,title = params[z])} else{
tableSummaryNoSeason(z)
}
z=7
if(is_latex_output()){
stargazer(results[params[z]],type="latex",header=FALSE,title = params[z])} else{
tableSummaryNoSeason(z)
YesSeason(z)
}
bookdown:::mathquill()
bookdown:::mathquill()
bookdown:::mathquill()
bookdown:::mathquill()
unlink('04_Part1_stormwater_linear_mixed_models_cache', recursive = TRUE)
bookdown:::mathquill()
